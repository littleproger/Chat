{"ast":null,"code":"import { ADD_NEW_MESSAGE, FETCHED_MESSAGES, DELETE_MESSAGE, SHOW_EDIT, HIDE_EDIT, EDIT_MESSAGE } from \"../actions/actionsType\";\nconst initialState = {\n  messages: [],\n  myInform: {\n    userId: \"61325\",\n    avatar: \"https://resizing.flixster.com/EVAkglctn7E9B0hVKJrueplabuQ=/220x196/v1.cjs0NjYwNjtqOzE4NDk1OzEyMDA7MjIwOzE5Ng\",\n    user: \"Yaroslav\"\n  },\n  editMsg: {\n    id: \"\",\n    editMsg: false,\n    text: \"\"\n  }\n};\nexport function chatReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_NEW_MESSAGE:\n      const message = {\n        id: action.payload.id,\n        userId: state.myInform.userId,\n        avatar: state.myInform.avatar,\n        user: state.myInform.user,\n        text: action.payload.text,\n        createdAt: action.payload.createdAt,\n        editedAt: \"\"\n      };\n      return { ...state,\n        messages: [...state.messages, message]\n      };\n\n    case FETCHED_MESSAGES:\n      let messages;\n\n      async function func() {\n        const response = await fetch(\"https://edikdolynskyi.github.io/react_sources/messages.json\");\n        messages = await response.json();\n      }\n\n    // return { ...state, messages: [...state.messages, ...messages] };\n\n    case DELETE_MESSAGE:\n      return { ...state,\n        messages: state.messages.filter(message => message.id !== action.payload)\n      };\n\n    case SHOW_EDIT:\n      console.log(action.payload);\n\n      if (action.payload) {\n        const text = state.messages.filter(message => message.id === action.payload);\n        return { ...state,\n          editMsg: {\n            id: action.payload,\n            editMsg: true,\n            text: text[0].text\n          }\n        };\n      } else {\n        const myMessage = state.messages.filter(message => state.myInform.userId === message.userId);\n        const lastMessage = myMessage[myMessage.length - 1];\n\n        if (lastMessage) {\n          return { ...state,\n            editMsg: {\n              id: lastMessage.id,\n              editMsg: true,\n              text: lastMessage.text\n            }\n          };\n        } else {\n          alert(\"You must write message first!\\nThis button for edit last message!\");\n        }\n      }\n\n    case HIDE_EDIT:\n      return { ...state,\n        editMsg: {\n          id: \"\",\n          editMsg: false,\n          text: \"\"\n        }\n      };\n\n    case EDIT_MESSAGE:\n      return { ...state,\n        messages: state.messages.map(message => {\n          if (message.id === action.payload.id) {\n            message.text = action.payload.text;\n            message.editedAt = new Date().toString();\n          }\n\n          return message;\n        })\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/yarik/Documents/binary/react-stage1/part2/src/components/reducers/chatReducer.js"],"names":["ADD_NEW_MESSAGE","FETCHED_MESSAGES","DELETE_MESSAGE","SHOW_EDIT","HIDE_EDIT","EDIT_MESSAGE","initialState","messages","myInform","userId","avatar","user","editMsg","id","text","chatReducer","state","action","type","message","payload","createdAt","editedAt","func","response","fetch","json","filter","console","log","myMessage","lastMessage","length","alert","map","Date","toString"],"mappings":"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","sourcesContent":["import {\n  ADD_NEW_MESSAGE,\n  FETCHED_MESSAGES,\n  DELETE_MESSAGE,\n  SHOW_EDIT,\n  HIDE_EDIT,\n  EDIT_MESSAGE,\n} from \"../actions/actionsType\";\nconst initialState = {\n  messages: [],\n  myInform: {\n    userId: \"61325\",\n    avatar:\n      \"https://resizing.flixster.com/EVAkglctn7E9B0hVKJrueplabuQ=/220x196/v1.cjs0NjYwNjtqOzE4NDk1OzEyMDA7MjIwOzE5Ng\",\n    user: \"Yaroslav\",\n  },\n  editMsg: {\n    id: \"\",\n    editMsg: false,\n    text: \"\",\n  },\n};\n\nexport function chatReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_NEW_MESSAGE:\n      const message = {\n        id: action.payload.id,\n        userId: state.myInform.userId,\n        avatar: state.myInform.avatar,\n        user: state.myInform.user,\n        text: action.payload.text,\n        createdAt: action.payload.createdAt,\n        editedAt: \"\",\n      };\n      return { ...state, messages: [...state.messages, message] };\n\n    case FETCHED_MESSAGES:\n    let messages;\n      async function func(){\n        const response = await fetch(\"https://edikdolynskyi.github.io/react_sources/messages.json\");\n        messages = await response.json();\n      }\n      // return { ...state, messages: [...state.messages, ...messages] };\n\n    case DELETE_MESSAGE:\n      return {\n        ...state,\n        messages: state.messages.filter(\n          (message) => message.id !== action.payload\n        ),\n      };\n\n    case SHOW_EDIT:\n      console.log(action.payload);\n      if (action.payload) {\n        const text = state.messages.filter(\n          (message) => message.id === action.payload\n        );\n        return {\n          ...state,\n          editMsg: { id: action.payload, editMsg: true, text: text[0].text },\n        };\n      } else {\n        const myMessage = state.messages.filter(\n          (message) => state.myInform.userId === message.userId\n        );\n        const lastMessage = myMessage[myMessage.length - 1];\n        if (lastMessage) {\n          return {\n            ...state,\n            editMsg: {\n              id: lastMessage.id,\n              editMsg: true,\n              text: lastMessage.text,\n            },\n          };\n        } else {\n          alert(\n            \"You must write message first!\\nThis button for edit last message!\"\n          );\n        }\n      }\n\n    case HIDE_EDIT:\n      return { ...state, editMsg: { id: \"\", editMsg: false, text: \"\" } };\n\n    case EDIT_MESSAGE:\n      return {\n        ...state,\n        messages: state.messages.map((message) => {\n          if (message.id === action.payload.id) {\n            message.text = action.payload.text;\n            message.editedAt = new Date().toString();\n          }\n          return message;\n        }),\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}